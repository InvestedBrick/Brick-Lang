//include statement 
#include funcs.brick


//This is a comment

/*
    This is a multiline comment
*/

//functions are declared with "brick [function name]" or when argumenst are following "brick [function name] : [arg type] -> [variable name], ..."
//there can me max 4 function arguments
brick function : int -> x, short -> y{
    //return statement returns value
    return (x + y)*2;

    //return type (optional)
}=> int

//the main function
brick main{
    //variable declaration using "dec [variable name] as [variable type] -> [value] ;"
    //variable types can be int : 4 bytes, short : 2 bytes, byte : 1 byte, bools : regular boolean (true / false)
    dec var as int -> 5;
    dec b as bool -> true;

    //variable assignment with "set [variable name] to [value];"
    //value can be an expression
    set var to 2 + 4;


    //increment/decrement variable by 1
    var++;
    var--;

    //change value by expression
    var += 3;
    var *= 2;

    //output string, variable or anything with output (add "noend" after last argument to make it not print a new line after printing out all the args)
    output "This is a string literal",var, noend;

    
    //if - else statements  (no elseif at the moment)
    if var == 5 * 2  {
        set var to 4;
    }else{
        set var to 2;
    }

    
    //while loops
    while var != 0{
        var--;
    }
    
    //for loops
    for dec i as int -> 0; i < 500; i++;{
        output i;
    }

    //string buffers as a storage container for strings
    dec str as strbuf -> 32; //stringbuffer with 32 bytes of space

    //comparisons can also be made with strings and stringbuffers
    while str != "password1234"{
        output "Enter the correct password: " noend;
        input str;
    }

    //function return values can be used in expressions
    //expressions can be negated with a "-" sign
    set var to -function(4,2);
    //for more things on functions view funcs.brick

    //Arrays
    dec arr as array int -> 10; //array of 10 integers; starting index is 0

    //set index of array to value; There is NO checking is the index is out of bounds
    dec n as int -> 4;
    set arr[n] to 2;
    //for more on arrays view test3.brick


    //set z t the memory address of n (like in C)
    dec z as int ptr -> &n;


    //dereference z using "$" before it
    set $z to 1; //changes the value of n
    

    z += 1; //increments z by 4 because it is an int pointer (int = 4 bytes) 4 * 1
    
    
    //exit statement with exitcode
    exit 0;
}