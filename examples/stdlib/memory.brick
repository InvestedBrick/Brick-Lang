#include syscalls.brick

brick system_request_memory : int -> n_bytes{
    dec mem as byte ptr -> mmap(n_bytes,1 | 2,1 | 32,-1);
    if mem == -1{
        output "Mapping failed!";
    }
    return mem;
}=> byte ptr

// size = 9
struct system_memory_block  {
    dec size as int -> 0;
    dec free as bool -> false;
    dec next as system_memory_block ptr -> null;
}

globals : [
    dec system_free_list as system_memory_block ptr -> null;
    dec system_memory_block_size as int -> 9 const;
]

brick find_free_block : int -> size{
    dec current as system_memory_block ptr -> globals::system_free_list;
    while current != null{
        if current.free == true and current.size >= size{
            return current;
        }
        set current to current.next;
    }
    return null;
}=> byte ptr

brick split_block : int ptr -> block, int -> size{
    dec the_block as system_memory_block ptr -> block;
    if the_block.size > size + globals::system_memory_block_size{
        dec n as int -> block + globals::system_memory_block_size + size;
        dec new_block as system_memory_block ptr -> n; 
        set new_block.size to the_block.size - size - globals::system_memory_block_size;
        set new_block.free to true;
        set new_block.next to the_block.next;

        set the_block.size to size;
        set the_block.next to new_block;
    }
}

brick malloc : int -> n_bytes{
    if n_bytes <= 0{
        return null;
    }
    dec block as system_memory_block ptr -> find_free_block(n_bytes);

    if block != null {
        // this is needed because stack and heap grow in different directions and I can't track where a variable is coming from
        set block to block + (globals::system_memory_block_size - 4);
        set block.free to false;
        split_block(block, n_bytes);
        return block + 4;
    }

    dec total_size as int -> n_bytes + globals::system_memory_block_size;
    set block to system_request_memory(total_size);
    if block == null{
        return null;
    }
    // I need to manually help bc of heap things
    set block to block + (globals::system_memory_block_size - 4);
    set block.size to n_bytes; 
    set block.free to false;
    set block.next to globals::system_free_list;
    set globals::system_free_list to block;

    return block + 4;
}=> byte ptr

brick system_merge_blocks : int ptr -> block{
    dec the_block as system_memory_block ptr -> block;
    while the_block.next != null and the_block.next.free == true{
        set the_block.size to the_block.size + 9 + the_block.next.size;
        set the_block.next to the_block.next.next;
    }
}

brick free : byte ptr -> p{
    if p == null{
        return null;
    }
    dec block as system_memory_block ptr -> p;
    set block to block - 4;
    set block.free to true;

    system_merge_blocks(block);
}

struct system_test{
    dec x as int -> 3;
    dec y as int -> 3;
}

brick main{
    /*
    dec x as int ptr -> malloc(4 * 4);

    set x[0] to 1;
    set x[1] to 2;
    set x[2] to 3;
    set x[3] to 4;

    dec my_struct as system_test ptr -> malloc(8);

    set my_struct.x to 27;
    set my_struct.y to 4;

    output itoa(x);
    output itoa(x[2]);
    output itoa(my_struct.y);

    free(x);

    set x[2] to 43;

    output itoa(x[2]);
    */
    exit 0;
}