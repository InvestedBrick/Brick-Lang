brick fac : int -> n{
    if n > 1{
        return n * fac(n - 1);
    }else{
        return 1;
    }
} => int

brick pow : int -> b, int -> n{
    if n == 0{
        return 1;
    }
    dec temp as int -> pow(b,n / 2);
    if n % 2 == 0{
        return temp * temp;
    }else{
        return b * temp * temp;
    }
}=>int

brick square : int -> x{ 
    return x * x;
}=> int

brick floorSqrt : int -> x{ 
    if x == 0{
        return 0;
    }
    if x == 1{
        return 1;
    }
    dec i as int -> 1;
    dec result as int -> 1;
    while result <= x{
        i++;
        set result to i * i;
    }
    return i - 1;
}=> int

brick abs : int -> x{
    return floorSqrt(square(x));
}=> int

brick ptr_out : short ptr-> x{
    output $x;
}

brick arr_contains : int ptr -> arr_head, int -> size, int -> key{
    for dec i as int-> 1; i < size; i++;{
        arr_head += i;
        if $arr_head == key{
            return true;
        }
        arr_head -= i;  
    }  
    return false;
}=>bool

brick arr_max : int ptr -> arr_head, int -> size{
    dec max as int -> $arr_head;
    for dec i as int-> 1; i < size; i++;{
        arr_head += i;
        if $arr_head > max{
            set max to $arr_head;
        }
        arr_head -= i;
    }
    return max;
}=> int

brick arr_min : int ptr -> arr_head, int -> size{
    dec min as int -> $arr_head;
    for dec i as int-> 1; i < size; i++;{
        arr_head += i;
        if $arr_head < min{
            set min to $arr_head;
        }
        arr_head -= i;
    }
    return min;
}=> int

brick pseudo_rand : int ptr -> seed {
    set $seed to (1103515245 * $seed + 3456) % 2147483648;
    return $seed;
}=> int

brick print_array : int ptr -> start, int -> size{
    for dec i as int -> 0; i < size; i++;{
        output "---" noend;
    }
    output;
    for dec i as int -> 0; i < size; i++;{
        output $start, " " noend;
        start += 1;
    }
    output;
    for dec i as int -> 0; i < size; i++;{
        output "---" noend;
    }
    output;
    start -= size;
}

brick q_sort_swap : int ptr -> a , int ptr -> b{
    dec t as int -> $a;
    set $a to $b;
    set $b to t;
}
//TODO: Deos currently not work, IDK why
brick q_sort_partition : int ptr -> arr_head, int -> size, int -> low, int -> high{
    //pivot at end of array
    arr_head += high;
    dec pivot as int -> $arr_head;
    arr_head -= high;
    dec i as int -> (low - 1);
    // traverse each element of the array
    // compare them with the pivot
    for dec j as int -> low; j < high; j++;{
        arr_head += j;
        if $arr_head < pivot {

            // if element smaller than pivot is found
            // swap it with the greater element pointed by i
            i++;
            // swap element at i with element at j
            dec waste as int -> arr_head;
            dec temp as int ptr -> 0;
            temp += (waste / 4); // divide by sizeof int because of pointer stuff
            arr_head -= j; //ptr to start of array
            print_array(arr_head,size);
            arr_head += i;
            output "Value arr_head: ", $arr_head, " is to swapped with: ", $temp;
            q_sort_swap(arr_head,temp);
            arr_head -= i;
            print_array(arr_head,size);
            arr_head += j;
            //arr_head is at start
        }
        arr_head -= j; // to ensure everything stays aligned
    }

    // swap the pivot element with the greater element at i
    arr_head += (i + 1);
    dec waste as int -> arr_head;
    dec temp as int ptr -> 0; 
    temp += (waste / 4);
    arr_head -= (i + 1);
    arr_head += high;
    q_sort_swap(temp,arr_head);
    arr_head -= high;

    // return the partition point
    return (i + 1);
}=>int

brick q_sort : int ptr -> start, int -> size, int -> low, int -> high{
    if low < high {

        // find the pivot element such that
        // elements smaller than pivot are on left of pivot
        // elements greater than pivot are on right of pivot
        dec pi as int -> q_sort_partition(start, size,low,high);

        //recursive call on the left of pivot
        q_sort(start,size,low,pi - 1);

        //recursive call on the right of pivot
        q_sort(start,size,pi + 1,high);
    }
}
/*
brick main {
    dec size as int -> 20 const;
    dec arr as array int -> 20;
    for dec i as int -> 0; i < size; i++;{
        dec seed as int -> i + 4 * 45 % 3;
        set arr[i] to pseudo_rand(&seed) % 20;
    }
    print_array(&arr[0],size);
    
    q_sort(&arr[0],size,0,size - 1);
    for dec i as int -> 0; i < size; i++;{
        output arr[i] , " " noend;
    }
    exit 0;
}
*/